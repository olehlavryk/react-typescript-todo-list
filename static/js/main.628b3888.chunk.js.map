{"version":3,"sources":["components/NavBar/NavBar.tsx","pages/AboutPage.tsx","components/TodoForm/TodoForm.tsx","components/TodoList/TodoList.tsx","pages/TodosPages.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NavBar","className","to","AboutPage","history","useHistory","onClick","push","TodoForm","onAdd","ref","useRef","htmlFor","onKeyPress","event","key","current","value","type","id","placeholder","TodoList","todos","onToggle","onRemove","removeHandler","useCallback","preventDefault","toggleHandler","length","map","todo","classes","completed","join","checked","onChange","title","TodosPages","useState","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","newTodo","Date","now","prev","confirm","filter","App","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.628b3888.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const NavBar: React.FC = () => {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper green darken-2 px1\">\r\n        <div className=\"container\">\r\n          <NavLink to=\"/\" className=\"brand-logo\">\r\n            Todo List\r\n          </NavLink>\r\n          <ul className=\"right hide-on-med-and-down\">\r\n            <li>\r\n              <NavLink to=\"/\">Todo list</NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink to=\"/about\">About</NavLink>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const AboutPage: React.FC = () => {\r\n  const history = useHistory();\r\n  return (\r\n    <>\r\n      <h1>About page</h1>\r\n      <p>\r\n        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ullam, ipsum\r\n        necessitatibus! Ea esse nemo corporis aut debitis enim explicabo\r\n        inventore.\r\n      </p>\r\n      <button className=\"btn\" onClick={() => history.push(\"/\")}>\r\n        Back to todo list\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n","import React, { useRef } from \"react\";\r\n\r\ninterface TodoFormProps {\r\n  onAdd(title: string): void;\r\n}\r\n\r\nexport const TodoForm: React.FC<TodoFormProps> = ({ onAdd }) => {\r\n  const ref = useRef<HTMLInputElement>(null);\r\n\r\n  const keyPressHandler = (event: React.KeyboardEvent) => {\r\n    if (event.key === \"Enter\") {\r\n      onAdd(ref.current!.value);\r\n      ref.current!.value = \"\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"mt2\">\r\n      <label htmlFor=\"title\" className=\"active\">\r\n        Add new task\r\n      </label>\r\n      <input\r\n        ref={ref}\r\n        onKeyPress={keyPressHandler}\r\n        type=\"text\"\r\n        className=\"text\"\r\n        id=\"title\"\r\n        placeholder=\"Enter todo task\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useCallback } from \"react\";\r\nimport { TodoListProps } from \"./../../interfaces/interfaces\";\r\n\r\nexport const TodoList: React.FC<TodoListProps> = ({\r\n  todos,\r\n  onToggle,\r\n  onRemove,\r\n}) => {\r\n  const removeHandler = useCallback(\r\n    (event: React.MouseEvent, id: number) => {\r\n      event.preventDefault();\r\n      onRemove(id);\r\n    },\r\n    [onRemove]\r\n  );\r\n\r\n  const toggleHandler = useCallback(\r\n    (id: number) => {\r\n      onToggle(id);\r\n    },\r\n    [onToggle]\r\n  );\r\n\r\n  if (todos.length === 0) return <p className=\"center\">There are no tasks.</p>;\r\n  return (\r\n    <ul>\r\n      {todos.map((todo) => {\r\n        const classes = [\"todo\"];\r\n\r\n        if (todo.completed) {\r\n          classes.push(\"completed\");\r\n        }\r\n\r\n        return (\r\n          <li className={classes.join(\" \")} key={todo.id}>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={todo.completed}\r\n                onChange={() => toggleHandler(todo.id)}\r\n              />\r\n              <span>{todo.title}</span>\r\n              <i\r\n                className=\"material-icons red-text\"\r\n                onClick={(event) => removeHandler(event, todo.id)}\r\n              >\r\n                delete\r\n              </i>\r\n            </label>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { TodoForm } from \"../components/TodoForm/TodoForm\";\r\nimport { TodoList } from \"../components/TodoList/TodoList\";\r\nimport { ITodo } from \"../interfaces/interfaces\";\r\n\r\ndeclare var confirm: (question: string) => boolean;\r\n\r\nexport const TodosPages: React.FC = () => {\r\n  const [todos, setTodos] = useState<ITodo[]>([]);\r\n\r\n  useEffect(() => {\r\n    const saved = JSON.parse(localStorage.getItem(\"todos\") || \"[]\") as ITodo[];\r\n\r\n    setTodos(saved);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  const addHandler = (title: string) => {\r\n    const newTodo: ITodo = {\r\n      id: Date.now(),\r\n      title: title,\r\n      completed: false,\r\n    };\r\n    setTodos((prev) => [newTodo, ...prev]);\r\n  };\r\n\r\n  const toggleHandler = (id: number) => {\r\n    setTodos((prev) =>\r\n      prev.map((todo) => {\r\n        if (todo.id === id) {\r\n          return {\r\n            ...todo,\r\n            completed: !todo.completed,\r\n          };\r\n        }\r\n        return todo;\r\n      })\r\n    );\r\n  };\r\n\r\n  const removeHandler = (id: number) => {\r\n    const shouldRemove = confirm(\"You are sure to want to delete the task?\");\r\n    if (shouldRemove) {\r\n      setTodos((prev) => prev.filter((todo) => todo.id !== id));\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <TodoForm onAdd={addHandler} />\r\n      <TodoList\r\n        todos={todos}\r\n        onRemove={removeHandler}\r\n        onToggle={toggleHandler}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { NavBar } from \"./components/NavBar/NavBar\";\nimport { AboutPage } from \"./pages/AboutPage\";\nimport { TodosPages } from \"./pages/TodosPages\";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <NavBar />\n      <div className=\"container\">\n        <Switch>\n          <Route component={TodosPages} path=\"/\" exact />\n          <Route component={AboutPage} path=\"/about\" />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}